<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="/" />
	<id>/</id>
	<title>Programmer's Tears</title>
	<rights>2017</rights>
	<updated>2017-06-04T13:16:15Z</updated>
	<logo>/images/main_smaller.jpg</logo>
	<subtitle>Programmer's Tears</subtitle>
	<entry>
		<link href="/posts/speed-up-ml-model-development-with-gnu-parallel" />
		<link rel="enclosure" type="image" href="/images/main_smaller.jpg" />
		<id>/posts/speed-up-ml-model-development-with-gnu-parallel</id>
		<title>Speed up ML model development with GNU Parallel</title>
		<updated>2017-06-04T00:00:00Z</updated>
		<content>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I feel like I've found the Holy Grail of parallel/distributed computation - the &lt;a href="https://www.gnu.org/software/parallel/"&gt;GNU Parallel&lt;/a&gt; program. This program allows you to run any command, script, pipeline or program in parallel with different arguments, possibly even distributing the jobs between several nodes. In contrast to frameworks such as Hadoop, it practically doesn't require any setup and has a very small overhead (perhaps it's not as robust though, and may scale worse for big data). I believe that any machine learning dev who works on "medium data", has access to a few Linux machines (e.g. in academia or a small startup/company) and would like to find these tricky hyperparameters more efficiently can benefit from this program. Especially if you're working with a kind of model that's not easy to parallalelize, or for any reason works only on a single core.&lt;/p&gt;
&lt;p&gt;My motivation for this post is that I've used GNU Parallel to set up a framework for distributed language model development with several stages - configuration, data preprocessing, training, testing and results presentation, and I was very satisfied with the results. It took some searching on the Internet to set it up, so I hope to simplify the process for others by writing this. If you find it useful and want more, GNU Parallel has a &lt;a href="https://www.gnu.org/software/parallel/parallel_tutorial.html"&gt;very thorough tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;I assume you're working on a Linux machine, so that one's easy - either use your package manager, or install the latest version using the magic command (taken from Parallel's tutorial):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(wget -O - pi.dk/3 || curl pi.dk/3/ || fetch -o - http://pi.dk/3) | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="some-examples"&gt;Some examples&lt;/h2&gt;
&lt;p&gt;I will show you how to use the GNU Parallel either on a local machine or with a set of nodes. The code for these examples is also available on &lt;a href="https://github.com/pzelasko/parallel-example"&gt;my GitHub profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's start with what we're going to compute - as a toy example, I've chosen to adapt the &lt;a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html"&gt;scikit-learn library tutorial example&lt;/a&gt; and run it using Python 3.6. The script &lt;code&gt;example.py&lt;/code&gt; uses an &lt;a href="http://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html#sphx-glr-auto-examples-datasets-plot-iris-dataset-py"&gt;existing dataset named Iris&lt;/a&gt; and trains SVM classifier to distinguish between three different types of irises. It accepts arguments &lt;code&gt;--set-gamma&lt;/code&gt; and &lt;code&gt;--set-c&lt;/code&gt;, which are hyperparameters for the SVM model - these are the guys we want to find the best values for. The &lt;code&gt;example.py&lt;/code&gt; script saves the model to file and prints accuracy for the hyperparameters it received.&lt;/p&gt;
&lt;p&gt;Parallelization on the local machine can be done with a simple command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ parallel \
    ./example.py --set-gamma {1} --set-c {2} \
    ::: 0.1 1 10 \
    ::: 0.2 2 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the first line (1) is just the invocation of the program, without any additional arguments - it will just use the default settings, e.g. utilizing all the available cores (1 per job). The second line (2) is the invocation of the script running our job, with placeholders &lt;code&gt;{1}&lt;/code&gt; and &lt;code&gt;{2}&lt;/code&gt; instead of arguments. These placeholders will be replaced before the command is run with values froms lines (3) and (4) - notice the &lt;code&gt;:::&lt;/code&gt; syntax, after which there appears a list of values that should be tested. In this example, we're running with values for gamma=(0.1, 1, 10) and C=(0.2, 2, 20). GNU Parallel will by default run the command with every combination of values from both lists, so in this example it's gonna be 9 jobs.&lt;/p&gt;
&lt;p&gt;Now, let's go to the distributed part - I'm gonna assume that you've set up the remote nodes to ssh without a password, and that they also have Python installed along with the scikit-learn library (or modify the example to use Docker ;)). Distribution of the jobs is really simple now - we're just gonna extend the previous command a little:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ parallel --sshloginfile nodefile --workdir ~/parallel-example --basefile example.py --return "iris_svm_g{1}_c{2}.mdl" \
    ./example.py --set-gamma {1} --set-c {2} \
    ::: 0.1 1 10 \
    ::: 0.2 2 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all, notice that only the line (1) has changed. Let's see each of the options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--sshloginfile nodefile&lt;/code&gt; indicates that the nodes are listed in a file named nodefile. The nodefile contains one node address per line, with optional prefix specifying number of cores to use (e.g. &lt;code&gt;32/192.156.0.200&lt;/code&gt;, to use up to 32 cores on the machine found at address 192.156.0.200). Also, &lt;code&gt;:&lt;/code&gt; is the special address which includes the local machine in the list of nodes;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--workdir ~/parallel-example&lt;/code&gt; specifies where working directory, which will be created on the remote node. Our script will be saving the trained model there;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--basefile example.py&lt;/code&gt; tells GNU Parallel that the file &lt;code&gt;example.py&lt;/code&gt; has to be copied (rsynced) to the remote node before any job is launched. If every job had a separate input file, we could use the &lt;code&gt;--transferfile&lt;/code&gt; option (see the tutorial);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--return "iris_svm_g{1}_c{2}.mdl"&lt;/code&gt; will first fill the placeholders with values specific for the launched job, and after it's finished, it will try to copy (rsync) the specified file (or directory) back the machine which launched the task. By default, the file will also remain on the remote node (that can be changed with &lt;code&gt;--cleanup&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Hopefully, this brief intro to GNU Parallel will make the first steps gentle for you. Of course there's a lot more options and possibilities than what I've shown - for that, you should really read its official tutorial. Once again, it's definitely a lot easier and faster to set up GNU Parallel than any "serious" distributed computation framework.&lt;/p&gt;


&lt;ul class="share-buttons"&gt;
  &lt;li&gt;&lt;a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fpzelasko.github.io&amp;amp;t=" title="Share on Facebook" target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&amp;amp;t=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Facebook" src="/images/social_flat_rounded_rects_svg/Facebook.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/intent/tweet?source=https%3A%2F%2Fpzelasko.github.io&amp;amp;text=:%20https%3A%2F%2Fpzelasko.github.io&amp;amp;via=PiotrZelasko" target="_blank" title="Tweet" onclick="window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent(document.title) + ':%20'  + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Tweet" src="/images/social_flat_rounded_rects_svg/Twitter.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://plus.google.com/share?url=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on Google+" onclick="window.open('https://plus.google.com/share?url=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Google+" src="/images/social_flat_rounded_rects_svg/Google+.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.reddit.com/submit?url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=" target="_blank" title="Submit to Reddit" onclick="window.open('http://www.reddit.com/submit?url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Submit to Reddit" src="/images/social_flat_rounded_rects_svg/Reddit.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=&amp;amp;summary=&amp;amp;source=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on LinkedIn" onclick="window.open('http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Share on LinkedIn" src="/images/social_flat_rounded_rects_svg/LinkedIn.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="mailto:?subject=&amp;amp;body=:%20https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Send email" onclick="window.open('mailto:?subject=' + encodeURIComponent(document.title) + '&amp;amp;body=' +  encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Send email" src="/images/social_flat_rounded_rects_svg/Email.svg"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = "https://pzelasko.github.io";  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = programmers-tears; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://programmers-tears.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content>
		<summary>Programmer's Tears</summary>
	</entry>
	<entry>
		<link href="/posts/practical-introduction-to-docker" />
		<link rel="enclosure" type="image" href="/images/main_smaller.jpg" />
		<id>/posts/practical-introduction-to-docker</id>
		<title>Practical introduction to Docker</title>
		<updated>2017-05-17T00:00:00Z</updated>
		<content>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I've been playing around with Docker to build our C++ speech recognition system, with several C++ dependencies. There were two major reasons for that - firstly, preparing all the dependencies can be pretty time-consuming, especially for newcomers in the project, and secondly, we're able to avoid any port collisions between continuous integration tests and development service instances, which sometimes happen to be launched on the same machine. In our company, an additional benefit to dockerizing the application is that the deployment on any new machine is as easy as launching a single command for building the image, or downloading one - automatically prepared by the CI runner - from a Docker registry service which runs in our local network. No need to worry about dependencies, conflicting compiler/library versions and all of that stuff.&lt;/p&gt;
&lt;h2 id="easy-start-with-docker"&gt;Easy start with Docker&lt;/h2&gt;
&lt;p&gt;Docker is a container manager, which is kind of like a virtual machine, but more efficient - you can read up more about it in detail &lt;a href="https://www.docker.com/what-container"&gt;here&lt;/a&gt;. Let's move on to setup. I'm going to assume you're working on a Linux system, as I were. On Ubuntu 16.04, the Docker installation is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install dockerio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker is also available on other Linuxes, Windows and Mac - you'll be able to find the installation instructions with a quick search. In order to be able to use the Docker without &lt;code&gt;sudo&lt;/code&gt;, you can add yourself to the &lt;code&gt;docker&lt;/code&gt; group and restart the service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo usermod -a -G docker &amp;lt;username&amp;gt; 
sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, the Docker is set up. The next step is preparing a Dockerfile, which is kind of like a Makefile, but with easier syntax, and comprises of build steps which are performed to create a Docker image. Let's see an example with several build steps.&lt;/p&gt;
&lt;h2 id="writing-a-dockerfile"&gt;Writing a Dockerfile&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: Okay, so this may not be the 'true Docker way' - the image will be bloated with some possibly redundant things, like g++, apt cache, build artifacts (e.g. object files) etc. If that's a problem for you, check out &lt;a href="https://www.ianlewis.org/en/creating-smaller-docker-images"&gt;this blog&lt;/a&gt; and &lt;a href="https://github.com/jwilder/docker-squash"&gt;this repository&lt;/a&gt; for some solutions.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ubuntu:16.04
MAINTAINER "&amp;lt;not@me.com&amp;gt;"

VARIABLE jobs=32

RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -qq g++

ADD ./my-app-src /my-app-src
WORKDIR /my-app-src

RUN make -j $jobs &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to complete the picture, the image is built using &lt;code&gt;docker build -t my-image-tag .&lt;/code&gt; command, where the dot specifies that Docker should look for a &lt;code&gt;Dockerfile&lt;/code&gt; in the current directory.&lt;/p&gt;
&lt;p&gt;Let's see what's happening here. The first line has a &lt;code&gt;FROM&lt;/code&gt; command. Every Dockerfile starts with one - it tells Docker which container should be used as a starting point. In this case, we're specifying that we want to use Ubuntu 16.04 container, which is by default pulled from the &lt;a href="https://hub.docker.com/"&gt;central Docker image repository&lt;/a&gt; (there's a lot of other images too).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MAINTAINER&lt;/code&gt; command is optional - but it's nice to know who should be the target of our rage when something doesn't work. Similarly, the &lt;code&gt;VARIABLE&lt;/code&gt; command is also optional - we can use it to set some build parameters, like number of threads - to pass the value, add &lt;code&gt;--build-arg jobs=64&lt;/code&gt; to &lt;code&gt;docker build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; command is the heart of the Dockerfile - with it, we can pass commands to the shell which is running in the container. In this example, we're using it to install a compiler (-qq flag means roughly say yes to everything) and then to build and install our app.&lt;/p&gt;
&lt;p&gt;Two particularly helpful commands are &lt;code&gt;ADD&lt;/code&gt;, which copies a directory from our host machine (&lt;code&gt;$(pwd)/my-app-src&lt;/code&gt;) inside the the container, and mounts it at the specified location (&lt;code&gt;/my-app-src&lt;/code&gt;). Now we have access to this directory and its contents. We can also specify the working directory inside the container by using the &lt;code&gt;WORKDIR&lt;/code&gt; command - here we used to enter the &lt;code&gt;/my-app-src&lt;/code&gt; directory and run Makefiles from there. When you run the container, this will be your current working directory.&lt;/p&gt;
&lt;h2 id="running-a-docker-image"&gt;Running a Docker image&lt;/h2&gt;
&lt;p&gt;When our image is built, it's easy to run it. We use command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -i -t my-image-tag
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to run the container interactively, or:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d [-p &amp;lt;port-inside&amp;gt;:&amp;lt;port-outside&amp;gt;] my-image-tag ./my-app --arg1 val1 --arg2 val2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to just start some service inside the container in a &lt;em&gt;detached&lt;/em&gt; mode, meaning it's going to run in the background. We can also forward the port from 'inside' to the 'outside', so that the service can be reached on the host machine port - that's what the &lt;code&gt;-p&lt;/code&gt; flag is for.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Docker is a powerful tool - this short introduction only touches the surface of all the possibilities, but it should provide a fair starting point to create your own Docker environment, suitable for your use-case. Let me know if you found it helpful!&lt;/p&gt;


&lt;ul class="share-buttons"&gt;
  &lt;li&gt;&lt;a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fpzelasko.github.io&amp;amp;t=" title="Share on Facebook" target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&amp;amp;t=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Facebook" src="/images/social_flat_rounded_rects_svg/Facebook.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/intent/tweet?source=https%3A%2F%2Fpzelasko.github.io&amp;amp;text=:%20https%3A%2F%2Fpzelasko.github.io&amp;amp;via=PiotrZelasko" target="_blank" title="Tweet" onclick="window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent(document.title) + ':%20'  + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Tweet" src="/images/social_flat_rounded_rects_svg/Twitter.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://plus.google.com/share?url=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on Google+" onclick="window.open('https://plus.google.com/share?url=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Google+" src="/images/social_flat_rounded_rects_svg/Google+.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.reddit.com/submit?url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=" target="_blank" title="Submit to Reddit" onclick="window.open('http://www.reddit.com/submit?url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Submit to Reddit" src="/images/social_flat_rounded_rects_svg/Reddit.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=&amp;amp;summary=&amp;amp;source=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on LinkedIn" onclick="window.open('http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Share on LinkedIn" src="/images/social_flat_rounded_rects_svg/LinkedIn.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="mailto:?subject=&amp;amp;body=:%20https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Send email" onclick="window.open('mailto:?subject=' + encodeURIComponent(document.title) + '&amp;amp;body=' +  encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Send email" src="/images/social_flat_rounded_rects_svg/Email.svg"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = "https://pzelasko.github.io";  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = programmers-tears; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://programmers-tears.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content>
		<summary>Programmer's Tears</summary>
	</entry>
	<entry>
		<link href="/posts/creating-modules-in-python" />
		<link rel="enclosure" type="image" href="/images/main_smaller.jpg" />
		<id>/posts/creating-modules-in-python</id>
		<title>Creating modules in Python</title>
		<updated>2017-05-09T00:00:00Z</updated>
		<content>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Regardless of whether you're building a web app, doing a data science project or just automating some workflow, you might find Python a very friendly language to do your work. Nonetheless, when I was starting to learn Python, I've experienced some struggles when it came to creating my own, easily importable modules and packages. Read further and check out a few tips which may save you the headache.&lt;/p&gt;
&lt;h2 id="modules-and-packages"&gt;Modules and packages&lt;/h2&gt;
&lt;p&gt;A Python module is just a single file with variables, functions and classes which can be imported. For example, if you have a file named &lt;code&gt;my_module.py&lt;/code&gt;, you can import it by typing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import my_module
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in your script.&lt;/p&gt;
&lt;p&gt;On the other hand, a package is a directory with modules, which additionally has to contain an &lt;code&gt;__init__.py&lt;/code&gt; file (which may or may not be empty - I might yet write about it). Seems easy? Rightfully so. But there's a catch to it - the Python interpreter has to be able to find your file. There are several ways to make it happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the imported file must be present in the current working directory, or&lt;/li&gt;
&lt;li&gt;the directory containing the file must be present in the &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH environment variable&lt;/a&gt;, or&lt;/li&gt;
&lt;li&gt;the package containing the module has to be installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first option is easy enough, but you'll probably want to keep your files in more places than one directory. Let's see what can go wrong.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;Suppose we have a package with following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_package
|
+-- first_subpackage
|   |-- __init__.py
|   +-- A.py
+-- second_subpackage
|   |-- __init__.py
|   |-- B.py
|   +-- holy_grail.py
|-- __init__.py
|-- C.py
+-- D.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As long as we're working within this package, there's no problem, we can &lt;code&gt;import C&lt;/code&gt; inside &lt;code&gt;D.py&lt;/code&gt;, as well as &lt;code&gt;import first_subpackage.A&lt;/code&gt;. However, when we want to &lt;code&gt;import C&lt;/code&gt; inside &lt;code&gt;A.py&lt;/code&gt; or &lt;code&gt;import first_subpackage.A&lt;/code&gt; inside &lt;code&gt;B.py&lt;/code&gt;, we've got a problem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ImportError: No module named 'C'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a quick and dirty workaround - you can register the parent path during script execution in the PATH variable, by adding these lines in &lt;code&gt;A.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys
sys.path.append('..')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The double dot means literally one directory up, i.e. the &lt;code&gt;my_package&lt;/code&gt; directory. However, there's a better way to handle this.&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The solution&lt;/h2&gt;
&lt;p&gt;An installation script. You're probably familiar with the &lt;code&gt;pip&lt;/code&gt; package manager - besides installing libraries from the &lt;a href="https://pypi.python.org/pypi"&gt;PyPI repository&lt;/a&gt;, it enables you to perform an installation of your own package. All you need to do is to prepare a &lt;code&gt;setup.py&lt;/code&gt; script, to be placed one directory above the &lt;code&gt;my_package&lt;/code&gt; directory. The &lt;code&gt;setup.py&lt;/code&gt; script contains information about your package, such as name, author, etc., but most importantly - the layout of your package.&lt;/p&gt;
&lt;p&gt;I won't get into much details now, but the basic form of this script would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from distutils.core import setup
setup(
    name='my_package',
    version='1.0',
    author='Brian',
    maintainer='Not Brian',
    description='Nice package.',
    py_modules=['my_package']
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to perform installation, you need to type this command in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path/to/my_package$ pip install -e .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes &lt;code&gt;pip&lt;/code&gt; install the package in a development mode - it means that no files will be copied, and the installation will be updated each time you modify the code - great! Now you will be able to perform previous imports without any &lt;code&gt;ImportError&lt;/code&gt;s. As a rule of thumb, inside &lt;code&gt;my_package&lt;/code&gt;, you should always import by typing the full path to the imported module - e.g. in &lt;code&gt;B.py&lt;/code&gt;, use &lt;code&gt;import my_package.second_subpackage.holy_grail&lt;/code&gt; instead of &lt;code&gt;import holy_grail&lt;/code&gt;. Additional benefit is that now you can &lt;code&gt;import my_package&lt;/code&gt; using the Python interpreter regardless of which directory you started it in.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;I've described some ways of handling Python modules and packages. Even though there are quick workarounds, the best option is to write a simple installation script. There's a lot more that can be said on this topic, but I hope you found this short intro helpful.&lt;/p&gt;


&lt;ul class="share-buttons"&gt;
  &lt;li&gt;&lt;a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fpzelasko.github.io&amp;amp;t=" title="Share on Facebook" target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&amp;amp;t=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Facebook" src="/images/social_flat_rounded_rects_svg/Facebook.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/intent/tweet?source=https%3A%2F%2Fpzelasko.github.io&amp;amp;text=:%20https%3A%2F%2Fpzelasko.github.io&amp;amp;via=PiotrZelasko" target="_blank" title="Tweet" onclick="window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent(document.title) + ':%20'  + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Tweet" src="/images/social_flat_rounded_rects_svg/Twitter.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://plus.google.com/share?url=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on Google+" onclick="window.open('https://plus.google.com/share?url=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Google+" src="/images/social_flat_rounded_rects_svg/Google+.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.reddit.com/submit?url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=" target="_blank" title="Submit to Reddit" onclick="window.open('http://www.reddit.com/submit?url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Submit to Reddit" src="/images/social_flat_rounded_rects_svg/Reddit.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=&amp;amp;summary=&amp;amp;source=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on LinkedIn" onclick="window.open('http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Share on LinkedIn" src="/images/social_flat_rounded_rects_svg/LinkedIn.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="mailto:?subject=&amp;amp;body=:%20https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Send email" onclick="window.open('mailto:?subject=' + encodeURIComponent(document.title) + '&amp;amp;body=' +  encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Send email" src="/images/social_flat_rounded_rects_svg/Email.svg"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = "https://pzelasko.github.io";  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = programmers-tears; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://programmers-tears.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content>
		<summary>Programmer's Tears</summary>
	</entry>
	<entry>
		<link href="/posts/yet-another-fizzubuzz" />
		<link rel="enclosure" type="image" href="/images/main_smaller.jpg" />
		<id>/posts/yet-another-fizzubuzz</id>
		<title>Yet another fizzbuzz...</title>
		<updated>2017-05-07T00:00:00Z</updated>
		<content>&lt;p&gt;By now, everybody has to know the infamous fizzbuzz programming interview task. Is it a good test of one's coding skills and problem-solving attitude? Honestly, I don't know. What I do know, is that some poeple are having great fun mocking the excercise (yes, myself included). My favourite so far is &lt;a href="http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/"&gt;Joel's take on tensorflow fizzbuzz solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, if a neural network can solve fizzubuzz, why shouldn't we task a C++ compiler with the same, right? Sure we can! I'll try to explain how it works.&lt;/p&gt;
&lt;p&gt;TL;DR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

template&amp;lt;bool mod_3, bool mod_5, unsigned number&amp;gt;
struct fizzbuzz { enum { value = number }; };
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;false, false, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;false, false, number&amp;gt;::value[] = "fizzbuzz"; 
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;false, true, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;false, true, number&amp;gt;::value[] = "fizz"; 
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;true, false, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;true, false, number&amp;gt;::value[] = "buzz"; 
 
template &amp;lt;unsigned idx&amp;gt;
struct iteration {
    iteration&amp;lt;idx + 1&amp;gt; next;
    void operator()() const { 
        std::cout &amp;lt;&amp;lt; fizzbuzz&amp;lt;static_cast&amp;lt;bool&amp;gt;(idx % 3), static_cast&amp;lt;bool&amp;gt;(idx % 5), idx&amp;gt;::value &amp;lt;&amp;lt; std::endl;
        next();
    }
};
 
template&amp;lt;&amp;gt;
struct iteration&amp;lt;100&amp;gt; {
    void operator()() const {}
};
 
int main() {
    iteration&amp;lt;1&amp;gt;{}();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, you might wonder, "what kind of craziness is this stuff?!" Well, let me explain myself then!&lt;/p&gt;
&lt;p&gt;Firstly, the assumption is to move as much of the program logic from runtime to compile time. What it means, for example, is that instead of generating code which checks whether a number is divisible by 3, I want the compiler to generate code which already checked that during compilation, and only prints to the console the right answer for a given number. Why would I do that? For fun of course! However, in reality, it turns out that it's actually quite a useful technique when performing some kinds of optimizations, since you're eliminating branching from your runtime code (however, at the cost of compilation time and possible generated code bloat) [also, while we're at it, remember, that &lt;a href="https://en.wikiquote.org/wiki/Donald_Knuth"&gt;premature optimization is the root of all evil!&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;So where do we start? Normally when iterating over one hundred numbers, one would probably use a for/while loop. No such thing here! We want our iteration to be performed in compile time. It seems like we could use just generate 100 different objects, each printing the right thing to the console, and call them one after another. One way to do this is to use recursion. But how do we generate those objects? Well, template metaprogramming comes to the rescue!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template &amp;lt;unsigned idx&amp;gt;
struct iteration {
    iteration&amp;lt;idx + 1&amp;gt; next;
    void operator()() const {
        /* print the right thing */
        next();
    }
};
 
template&amp;lt;&amp;gt;
struct iteration&amp;lt;100&amp;gt; {
    void operator()() const {}
}; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first define a struct named iteration. Since we templated the structure on an unsigned int we named index, we're in fact creating about 100 classes, each of which can use its individual index to determine what should be written to standard output, and can call the iteration after it (for that, we make the objects of these classes callable using the operator()). Should we only define the general recipe for iteration, it would recurse infinitely, and the compiler would stop at some point and yell at us. That's good! The compiler should yell at us for doing such silly mistakes. So, in order to terminate the recursion, we create a template specialization for the struct iteration at index 100, which doesn't point at another iteration and simply does nothing.&lt;/p&gt;
&lt;p&gt;Okay, so we've successfully replaced the loop. Now, we've got to determine when to write "fizz", "buzz", "fizzbuzz", or the number. That's the part where you usually write a series of ifs and elses. Not gonna happen here!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template&amp;lt;bool mod_3, bool mod_5, unsigned number&amp;gt;
struct fizzbuzz { enum { value = number }; };
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;false, false, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;false, false, number&amp;gt;::value[] = "fizzbuzz";
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;false, true, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;false, true, number&amp;gt;::value[] = "fizz";
 
template&amp;lt;unsigned number&amp;gt;
struct fizzbuzz&amp;lt;true, false, number&amp;gt; { static const char value[]; };
template&amp;lt;unsigned number&amp;gt; const char fizzbuzz&amp;lt;true, false, number&amp;gt;::value[] = "buzz";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of writing conditional branches, we will make the compiler select the right branch at compile time. Since we already know all the numbers (1-100) at compile time, we observe that we can also determine whether they are divisible by 3 and by 5 at compile time. Conditional statements are now replaced by a templated struct fizzbuzz, which by default allows to access the number by using an enum with a constant named value defined inside. After having written the general case, we can specialize this template to write proper output depending on conditions being satisfied - e.g. when &lt;code&gt;number % 3&lt;/code&gt; evaluates to 0, and &lt;code&gt;number % 5&lt;/code&gt; evaluates to something other than 0, we cast them to bool (resulting in false and true) - we make this specialization have a &lt;code&gt;const char[]&lt;/code&gt; member &lt;code&gt;value&lt;/code&gt; with value "fizz".&lt;/p&gt;
&lt;p&gt;Since we have all specializations defined, we will get either an &lt;code&gt;int&lt;/code&gt; (more specifically, enum) or a &lt;code&gt;const char[]&lt;/code&gt; when evaluating
&lt;code&gt;fizzbuzz&amp;lt;static_cast&amp;lt;bool&amp;gt;(idx % 3), static_cast&amp;lt;bool&amp;gt;(idx % 5), idx&amp;gt;::value&lt;/code&gt;.
We can just pass that to std::cout.&lt;/p&gt;
&lt;p&gt;Now, all we have to do, is call first iteration in main.&lt;/p&gt;
&lt;p&gt;That's all there is to it. If you don't believe the code doesn't have any loops or conditional branches, &lt;a href="http://coliru.stacked-crooked.com/a/3ce6013f2223f7e7"&gt;have a look at assembly at coliru&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the post. Please let me know about that in the comments. Till' next time!&lt;/p&gt;


&lt;ul class="share-buttons"&gt;
  &lt;li&gt;&lt;a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fpzelasko.github.io&amp;amp;t=" title="Share on Facebook" target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&amp;amp;t=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Facebook" src="/images/social_flat_rounded_rects_svg/Facebook.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/intent/tweet?source=https%3A%2F%2Fpzelasko.github.io&amp;amp;text=:%20https%3A%2F%2Fpzelasko.github.io&amp;amp;via=PiotrZelasko" target="_blank" title="Tweet" onclick="window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent(document.title) + ':%20'  + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Tweet" src="/images/social_flat_rounded_rects_svg/Twitter.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://plus.google.com/share?url=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on Google+" onclick="window.open('https://plus.google.com/share?url=' + encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Share on Google+" src="/images/social_flat_rounded_rects_svg/Google+.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.reddit.com/submit?url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=" target="_blank" title="Submit to Reddit" onclick="window.open('http://www.reddit.com/submit?url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Submit to Reddit" src="/images/social_flat_rounded_rects_svg/Reddit.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https%3A%2F%2Fpzelasko.github.io&amp;amp;title=&amp;amp;summary=&amp;amp;source=https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Share on LinkedIn" onclick="window.open('http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=' + encodeURIComponent(document.URL) + '&amp;amp;title=' +  encodeURIComponent(document.title)); return false;"&gt;&lt;img alt="Share on LinkedIn" src="/images/social_flat_rounded_rects_svg/LinkedIn.svg"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="mailto:?subject=&amp;amp;body=:%20https%3A%2F%2Fpzelasko.github.io" target="_blank" title="Send email" onclick="window.open('mailto:?subject=' + encodeURIComponent(document.title) + '&amp;amp;body=' +  encodeURIComponent(document.URL)); return false;"&gt;&lt;img alt="Send email" src="/images/social_flat_rounded_rects_svg/Email.svg"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = "https://pzelasko.github.io";  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = programmers-tears; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://programmers-tears.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content>
		<summary>Programmer's Tears</summary>
	</entry>
</feed>